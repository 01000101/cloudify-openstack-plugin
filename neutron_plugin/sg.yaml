#######
# Types and implementation details.
#
# Virtual machine is started using Cloudify's built-in OpenStack plugin.
# Python simple HTTP server is started using Cloudify's Python web server plugin
# which can be found here: https://github.com/CloudifySource/cosmo-plugin-python-webserver
#

# cloudify.types contains Cloudify's built-in types, relationships, workflows etc...
# cloudify.openstack contains Cloudify's built-in openstack types and plugins definitions.

plugins:
    nova_plugin:
        derived_from: cloudify.plugins.manager_plugin
        properties:
            url: 'https://github.com/Fewbytes/cloudify-openstack-plugin/archive/feature/CFY-666-optionally-use-sg-by-name.zip'
    neutron_plugin:
        derived_from: cloudify.plugins.manager_plugin
        properties:
            url: 'https://github.com/Fewbytes/cloudify-openstack-plugin/archive/feature/CFY-666-optionally-use-sg-by-name.zip'

imports:
    - cloudify.types

types:
    neutron_security_group:
        derived_from: cloudify.types.base  # Maybe use more specific type?
        properties:
            - security_group
            - create_if_missing: true
            - neutron_config: {}
            - rules: []
            - disable_egress: false
        interfaces:
            cloudify.interfaces.lifecycle:
                - create: neutron_plugin.security_group.create
                - delete: neutron_plugin.security_group.delete
    nova_server:
        derived_from: cloudify.types.host
        interfaces:
            cloudify.interfaces.lifecycle:
                - start: nova_plugin.server.start
                # - stop: nova_plugin.server.stop
                # - delete: nova_plugin.server.delete
            cloudify.interfaces.host:
                - get_state: nova_plugin.server.get_state
        workflows:
            create:
               radial: |
                  define my_host_create
                    log message: '111'
            start:
               radial: |
                  define my_host_create
                    log message: '111'
            stop:
               radial: |
                  define my_host_create
                    log message: '111'
            delete:
               radial: |
                  define my_host_create
                    log message: '111'
            configure:
               radial: |
                  define my_host_create
                    log message: '111'


# The blueprint contains two nodes, a vm and a web server hosted in it.
blueprint:
    name: hello_world
    nodes:
        # Server node is required as workaround.
        # Execution will stuck if won't be here
        -   name: server
            type: nova_server
        -   name: security_group
            type: neutron_security_group
            properties:
                # create_if_missing: false
                security_group:
                    name: ilya01
                rules:
                    -   remote_ip_prefix: 0.0.0.0/0
                        port: 8080

